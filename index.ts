#!/usr/bin/env node
import { convertTweeToJson } from "@yotoplay/twee2json";
import { convertTweeToYoto } from "@yotoplay/twee2yoto";
import path from "path";
import fs from "fs";
import { argv } from "./lib/args.js";
import { setupOutput, setupInput } from "./lib/utils/consoleHelper.js";
import "dotenv/config";
import { getProfile, updateCard } from "./lib/apis/api.yoto.js";
import {
  readFilesFromDirectory,
  readFileContent,
} from "./lib/utils/fileHandler.js";
import {
  uploadIconsToYotoCloud,
  uploadAudioToYotoCloud,
} from "./lib/uploading/yotoUploader.js";
import { AxiosError } from "axios";
import {
  handleAutoGeneratedAudio,
  handleProvidedAudio,
} from "./lib/audio/audioFileHandler.js";

import { ensureAuth } from "./lib/auth/ensureAuth.js";
import { setupElevenLabsApiKey } from "./lib/auth/elevenLabsAuth.js";
import { logger } from "./lib/utils/logger.js";
import { TokenManager } from "@yotoplay/oauth-device-code-flow";
import os from "os";

(async () => {
  if (argv.clearAuth) {
    const tokenPath = path.join(os.homedir(), ".twine2yoto", "tokens.json");
    const tokenManager = new TokenManager(tokenPath);
    await tokenManager.clearTokens();
    logger.success("Authentication configuration cleared");
    return;
  }

  logger.time("Execution time");
  
  // Setup ElevenLabs API key (optional)
  await setupElevenLabsApiKey();
  
  const inputDirectory = argv.input;
  const tweeFiles = readFilesFromDirectory(inputDirectory, ".twee");

  if (tweeFiles.length === 0) throw new Error("No Twee files found.");
  const tweePath = path.join(inputDirectory, `${tweeFiles[0].name}.twee`);
  logger.info(`Reading Twee file from ${tweePath}`);

  const tweeData = readFileContent(tweePath);
  const tweeJson = convertTweeToJson(tweeData);
  if (argv.type === "twee") {
    process.stdout.write(JSON.stringify(tweeJson, null, 2));
    return;
  }

  const yotoJson = convertTweeToYoto(tweeJson, { useTags: argv.useTags });
  if (!argv.output) {
    process.stdout.write(JSON.stringify(yotoJson, null, 2));
    return;
  }

  const input = await setupInput(inputDirectory);
  const output = await setupOutput(
    path.join("./", argv.output, yotoJson.slug),
    argv.force || false,
  );

  // Manually generated audio files
  const providedAudioFiles = await handleProvidedAudio(input, output, yotoJson);
  if (providedAudioFiles.length > 0) {
    `Prepared and moved ${providedAudioFiles.length} files to output directory...`;
  } else {
    logger.warn("No audio files provided");
  }
  // ^^ manually generated

  // auto generated audio files
  if (tweeJson.variables.auto) {
    logger.pending("Using 11labs to generate audio tracks...");
    const count = await handleAutoGeneratedAudio(
      providedAudioFiles,
      output,
      tweeJson,
      yotoJson,
    );
    logger.success(`Generated ${count} audio tracks`);
  }
  // ^^^ auto generated

  const jsonFilename = "card.json";
  const jsonPath = path.join(output.outputDir, jsonFilename);
  fs.writeFileSync(jsonPath, JSON.stringify(yotoJson, null, 2));
  logger.success(`File written to ${jsonPath}`);

  let cardId = null;
  if (argv.upload) {
    try {
      const access_token = await ensureAuth();

      // vvvv ICON UPLOAD vvvv
      if (fs.existsSync(input.iconDir)) {
        logger.info("Copying icons to output directory...");
        fs.cpSync(input.iconDir, output.iconDir, { recursive: true });
        logger.pending(`Uploading icons`);
        const iconsUploaded = await uploadIconsToYotoCloud(
          access_token,
          output.iconDir,
          yotoJson,
        );
        logger.complete(`Uploaded ${iconsUploaded.length} icons`);
      }
      // ^^^^ ICON UPLOAD ^^^^

      // vvvv AUDIO UPLOAD vvvv
      logger.info(`reading audio directory ${output.audioDir}`);
      logger.pending(`Uploading audio`);
      const audioUploaded = await uploadAudioToYotoCloud(
        access_token,
        output.audioDir,
        yotoJson,
      );
      logger.complete(`Uploaded ${audioUploaded.length} audio files`);
      // ^^^^ AUDIO UPLOAD ^^^^

      // upload the card
      if (argv.cardid) {
        logger.pending("Updating existing card in YotoCloud...", argv.cardid);
        yotoJson.cardId = argv.cardid;
      } else {
        logger.pending("Uploading card to YotoCloud...");
      }
      const response = await updateCard(access_token, yotoJson);
      logger.success("Card uploaded to YotoCloud!");
      cardId = response.cardId;
    } catch (err) {
      logger.error("Failed to upload card to YotoCloud");
      logger.error(
        (err as AxiosError).isAxiosError
          ? (err as AxiosError).response?.data
          : err,
      );
      process.exit(1);
    } finally {
      logger.timeEnd("Execution time");

      if (cardId) {
        logger.log("");
        logger.log("");
        logger.log(`*** Your Yoto CardID is: ${cardId} ***`);
      }
    }
  }
})();
